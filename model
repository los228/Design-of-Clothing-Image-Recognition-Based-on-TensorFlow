# 使用tensorflow构建一个用于服装分类的NN

import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt
#
# # 导入和加载数据集
fashion_mnist = keras.datasets.fashion_mnist
(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()
#
# # 电影评论数据集
# # imdb = keras.datasets.imdb
# #
# # (train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)
#
# 服装类别的名称
class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

# 浏览数据格式
# 训练数据集中有60000张28*28像素的图像
print(train_images.shape)

# # 预览训练数据
# plt.figure()
# plt.imshow(train_images[0])
# plt.colorbar()
# plt.grid(False)
# plt.show()

# 数据集标准化，以便输入NN进一步处理
train_images = train_images / 255.0
test_images = test_images / 255.0

# 验证标准化后的数据是否正确
# 经测试，数据正确
plt.figure(figsize=(10, 10))
for i in range(25):
    plt.subplot(5, 5, i + 1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    plt.xlabel(class_names[train_labels[i]])
plt.savefig('tupiao.png')
plt.show()

# 设置模型的层
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),# 将图像二维数组-》一维数组
    keras.layers.Dense(128, activation='relu'),# 128个节点的隐藏层
    keras.layers.Dense(10)# 10个节点的输出层，分别表示输入是10个类别中各个类别的概率
])

# 编译模型（设置模型的损失函数优化方案等）
model.compile(
    optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics=['accuracy']
)

# 用训练集训练模型，也就是拟合函数
model.fit(train_images, train_labels, epochs=10)

# 测试模型在测试数据集上面的表现
# 模型在测试数据集上面的表现一般会比训练数据集上差一些
# 原因是训练过程中出现了过拟合现象
test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)
print('训练好的模型在测试数据集上的准确率为：')
print(test_acc)

# 建立概率模型，将NN模型的输出转换为更容易理解的概率
# 其实就是在NN模型的后面加一层
probability_model = tf.keras.Sequential([
    model, tf.keras.layers.Softmax()
])

# 用修改后的NN模型预测图像的标签
predictions = probability_model.predict(test_images)
# 打印模型对第一张图片的预测
# 输出是10个数字，代表这张图片属于各个类别的概率
print(predictions[0])
mIndex = np.argmax(predictions[0])
print(mIndex)
print('模型对第一章图片的判断：这是只 ', class_names[mIndex])
print('而第一张图片表示的实际是 ', class_names[test_labels[0]])


# 将模型的输出结果画成图表
def plot_image(i, predictions_array, true_label, img):
    predictions_array, true_label, img = predictions_array, true_label[i], img[i]
    plt.grid(False)
    plt.xticks([])# 设置xy轴
    plt.yticks([])

    plt.imshow(img, cmap=plt.cm.binary)

    predicted_label = np.argmax(predictions_array)
    if predicted_label == true_label:
        color = 'blue'
    else:
        color = 'red'

    # 图像的横坐标细节
    plt.xlabel('{} {:2.0f}% ({})'.format(
        class_names[predicted_label],
        100 * np.max(predictions_array),
        class_names[true_label]),
        color=color
    )

# predictions_array表示的是某张图片的预测数组
def plot_value_array(i, predictions_array, true_label):
    predictions_array, true_label = predictions_array, true_label[i]
    plt.grid(False)
    plt.xticks(range(10))
    plt.yticks([])
    thisplot = plt.bar(range(10), predictions_array, color='#777777')
    plt.ylim([0, 1])
    predicted_label = np.argmax(predictions_array)

    thisplot[predicted_label].set_color('red')
    thisplot[true_label].set_color('blue')

# print('对第一张图片的预测结果可视化……')
# i = 0
# plt.figure(figsize=(6, 3))
# plt.subplot(1, 2, 1)
# plot_image(i, predictions[i], test_labels, test_images)
# plt.subplot(1, 2, 2)
# plot_value_array(i, predictions[i], test_labels)
# plt.show()
#
# print('对第13张图片的预测结果可视化……')
# i = 12
# plt.figure(figsize=(6, 3))
# plt.subplot(1, 2, 1)
# plot_image(i, predictions[i], test_labels, test_images)
# plt.subplot(1, 2, 2)
# plot_value_array(i, predictions[i], test_labels)
# plt.show()

# 所有预测结果可视化
num_rows = 5
num_cols = 3
num_images = num_rows*num_cols
plt.figure(figsize=(2*2*num_cols, 2*num_rows))
for i in range(num_images):
  plt.subplot(num_rows, 2*num_cols, 2*i+1)
  plot_image(i, predictions[i], test_labels, test_images)
  plt.subplot(num_rows, 2*num_cols, 2*i+2)
  plot_value_array(i, predictions[i], test_labels)
plt.tight_layout()
plt.savefig(r"D:\model_final\totolly_predictions.jpg")
plt.show()



# 使用训练好的模型
number = 3
img = test_images[number]
plt.imshow(img)
plt.savefig(r"D:\model_final\sample.jpg")
plt.show()
print(img.shape)
img = (np.expand_dims(img, 0))
print(img.shape)
predictions_single = probability_model.predict(img)
print('对单张图片的预测结果为：')
print(predictions_single)
plot_value_array(1, predictions_single[0], test_labels)
plt.xticks(range(10), class_names, rotation=45)
print(np.argmax(predictions_single[0]))
print('模型对这个图片的判断：这是只 ', class_names[np.argmax(predictions_single[0])])
print('正确判断是', class_names[test_labels[number]])
plot_value_array(1, predictions_single[0], test_labels)
_ = plt.xticks(range(10), class_names, rotation=45)
plt.savefig(r"D:\model_final\label_predictions.jpg")
plt.show()

model.save('model.h5')